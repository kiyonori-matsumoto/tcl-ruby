#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Tclp < Racc::Parser
##### State transition tables begin ###

racc_action_table = [
     4,     5,     4,     9,     4 ]

racc_action_check = [
     0,     1,     2,     5,     7 ]

racc_action_pointer = [
    -2,     1,     0,   nil,   nil,     3,   nil,     2,   nil,   nil,
   nil ]

racc_action_default = [
    -7,    -7,    -3,    -4,    -6,    -7,    -1,    -3,    -5,    11,
    -2 ]

racc_goto_table = [
     6,     1,     2,     3,   nil,    10 ]

racc_goto_check = [
     3,     1,     2,     5,   nil,     3 ]

racc_goto_pointer = [
   nil,     1,     2,    -2,   nil,     3 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     7,     8 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 4, :_reduce_1,
  2, 6, :_reduce_2,
  0, 6, :_reduce_3,
  1, 5, :_reduce_none,
  1, 7, :_reduce_none,
  1, 8, :_reduce_6 ]

racc_reduce_n = 7

racc_shift_n = 11

racc_token_table = {
  false => 0,
  :error => 1,
  :IDENTIFIER => 2 }

racc_nt_base = 3

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IDENTIFIER",
  "$start",
  "target",
  "command",
  "arguments",
  "argument",
  "identifier" ]

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'tcl_rule.y', 3)
  def _reduce_1(val, _values, result)
     result << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'tcl_rule.y', 4)
  def _reduce_2(val, _values, result)
     result = val[0] + Array(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'tcl_rule.y', 5)
  def _reduce_3(val, _values, result)
     result 
    result
  end
.,.,

# reduce 4 omitted

# reduce 5 omitted

module_eval(<<'.,.,', 'tcl_rule.y', 8)
  def _reduce_6(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Tclp
