#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Tclp < Racc::Parser
##### State transition tables begin ###

racc_action_table = [
     6,     7,     6,     6,    12,    13,     6 ]

racc_action_check = [
     0,     1,     3,     4,     7,     9,    10 ]

racc_action_pointer = [
    -3,     1,   nil,    -1,     0,   nil,   nil,     4,   nil,     3,
     3,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -3,   -10,    -1,    -3,    -6,    -7,    -9,   -10,    -2,   -10,
    -6,    -8,    15,    -4,    -5 ]

racc_goto_table = [
     9,    11,     2,     1,   nil,     8,    14,    11 ]

racc_goto_check = [
     5,     7,     2,     1,   nil,     2,     5,     7 ]

racc_goto_pointer = [
   nil,     3,     2,   nil,   nil,    -4,   nil,    -3 ]

racc_goto_default = [
   nil,   nil,   nil,     3,     4,   nil,    10,     5 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 5, :_reduce_1,
  2, 6, :_reduce_2,
  0, 6, :_reduce_3,
  3, 7, :_reduce_4,
  2, 9, :_reduce_5,
  0, 9, :_reduce_6,
  1, 8, :_reduce_none,
  1, 10, :_reduce_none,
  1, 11, :_reduce_9 ]

racc_reduce_n = 10

racc_shift_n = 15

racc_token_table = {
  false => 0,
  :error => 1,
  :EOL => 2,
  :IDENTIFIER => 3 }

racc_nt_base = 4

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "EOL",
  "IDENTIFIER",
  "$start",
  "target",
  "sentences",
  "sentence",
  "command",
  "arguments",
  "argument",
  "identifier" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'tcl_rule.y', 3)
  def _reduce_1(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'tcl_rule.y', 4)
  def _reduce_2(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'tcl_rule.y', 5)
  def _reduce_3(val, _values, result)
     result 
    result
  end
.,.,

module_eval(<<'.,.,', 'tcl_rule.y', 6)
  def _reduce_4(val, _values, result)
     result << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'tcl_rule.y', 7)
  def _reduce_5(val, _values, result)
     result = val[0] + Array(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'tcl_rule.y', 8)
  def _reduce_6(val, _values, result)
     result 
    result
  end
.,.,

# reduce 7 omitted

# reduce 8 omitted

module_eval(<<'.,.,', 'tcl_rule.y', 11)
  def _reduce_9(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Tclp
